{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Manish\\\\Documents\\\\Projects\\\\LBG test\\\\lloyds-web-interview\\\\src\\\\Autocomplete.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { fetchSuggestions } from \"./utils/api\";\nimport \"./Autocomplete.css\";\nimport { SaveID } from './redux/action';\nimport { useSelector, useDispatch } from 'react-redux';\n\nfunction Autocomplete() {\n  _s();\n\n  //const [searchTerm, setSearchTerm] = useState(\"\");\n  const {\n    searchTerm,\n    setSearchTerm,\n    searchResults\n  } = useSearchProduct();\n  const [suggestions, setSuggestions] = useState([]);\n  const [showSuggestions, setshowSuggestions] = useState(false); // const productID = useSelector(state => state.data.productID)\n\n  const dispatch = useDispatch();\n  const maxSize = 10;\n  useEffect(() => {\n    fetchSuggestions(searchTerm).then(_suggestions => setSuggestions(_suggestions.slice(0, maxSize))); // console.log('useEffect',suggestions)   \n  }, [searchTerm]);\n\n  const setSuggestion = suggestion => {\n    setSearchTerm(suggestion.title);\n    setshowSuggestions(false);\n    dispatch(SaveID(suggestion.id)); //console.log('props.productID', productID)\n  };\n\n  const setSearch = searchTerm => {\n    setSearchTerm(searchTerm);\n    searchTerm === '' ? setshowSuggestions(false) : setshowSuggestions(true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"search-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: searchTerm,\n      className: \"search-box\",\n      placeholder: \"Search for a product\",\n      onChange: e => setSearch(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), showSuggestions && suggestions && /*#__PURE__*/_jsxDEV(\"ul\", {\n      class: \"suggestions\",\n      children: suggestions.map((suggestion, index) => {\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          onClick: () => setSuggestion(suggestion),\n          children: suggestion.title\n        }, suggestion.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 17\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 10\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Autocomplete, \"T62jQ/Tb1ATD4pprQqkOVWuMVOc=\", true, function () {\n  return [useDispatch];\n});\n\n_c = Autocomplete;\nexport default Autocomplete;\n\nvar _c;\n\n$RefreshReg$(_c, \"Autocomplete\");","map":{"version":3,"sources":["C:/Users/Manish/Documents/Projects/LBG test/lloyds-web-interview/src/Autocomplete.js"],"names":["React","useEffect","useState","fetchSuggestions","SaveID","useSelector","useDispatch","Autocomplete","searchTerm","setSearchTerm","searchResults","useSearchProduct","suggestions","setSuggestions","showSuggestions","setshowSuggestions","dispatch","maxSize","then","_suggestions","slice","setSuggestion","suggestion","title","id","setSearch","e","target","value","map","index"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,gBAAT,QAAiC,aAAjC;AACA,OAAO,oBAAP;AACA,SAAQC,MAAR,QAAqB,gBAArB;AACA,SAASC,WAAT,EAAqBC,WAArB,QAAyC,aAAzC;;AAEA,SAASC,YAAT,GAAwB;AAAA;;AAEtB;AACA,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA,aAAd;AAA6BC,IAAAA;AAA7B,MAA+CC,gBAAgB,EAArE;AACA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCX,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACY,eAAD,EAAkBC,kBAAlB,IAAwCb,QAAQ,CAAC,KAAD,CAAtD,CALsB,CAMvB;;AACC,QAAMc,QAAQ,GAAGV,WAAW,EAA5B;AACA,QAAMW,OAAO,GAAC,EAAd;AAIAhB,EAAAA,SAAS,CAAC,MAAM;AACdE,IAAAA,gBAAgB,CAACK,UAAD,CAAhB,CAA6BU,IAA7B,CAAmCC,YAAD,IAChCN,cAAc,CAACM,YAAY,CAACC,KAAb,CAAmB,CAAnB,EAAqBH,OAArB,CAAD,CADhB,EADc,CAIf;AACA,GALQ,EAKN,CAACT,UAAD,CALM,CAAT;;AAOA,QAAMa,aAAa,GAAEC,UAAU,IAAE;AAC/Bb,IAAAA,aAAa,CAACa,UAAU,CAACC,KAAZ,CAAb;AACAR,IAAAA,kBAAkB,CAAC,KAAD,CAAlB;AACAC,IAAAA,QAAQ,CAACZ,MAAM,CAACkB,UAAU,CAACE,EAAZ,CAAP,CAAR,CAH+B,CAI/B;AACD,GALD;;AAMA,QAAMC,SAAS,GAAEjB,UAAU,IAAE;AAC3BC,IAAAA,aAAa,CAACD,UAAD,CAAb;AACAA,IAAAA,UAAU,KAAI,EAAd,GAAiBO,kBAAkB,CAAC,KAAD,CAAnC,GAA2CA,kBAAkB,CAAC,IAAD,CAA7D;AACD,GAHD;;AAIA,sBAEE;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAA,4BACE;AACE,MAAA,IAAI,EAAC,MADP;AAEE,MAAA,KAAK,EAAEP,UAFT;AAGE,MAAA,SAAS,EAAC,YAHZ;AAIE,MAAA,WAAW,EAAC,sBAJd;AAKE,MAAA,QAAQ,EAAGkB,CAAD,IAAOD,SAAS,CAACC,CAAC,CAACC,MAAF,CAASC,KAAV;AAL5B;AAAA;AAAA;AAAA;AAAA,YADF,EAQId,eAAe,IAAEF,WAAlB,iBAEE;AAAI,MAAA,KAAK,EAAC,aAAV;AAAA,gBACIA,WAAW,CAACiB,GAAZ,CAAgB,CAACP,UAAD,EAAaQ,KAAb,KAAuB;AAEtC,4BACE;AAAyB,UAAA,OAAO,EAAE,MAAIT,aAAa,CAACC,UAAD,CAAnD;AAAA,oBACGA,UAAU,CAACC;AADd,WAAUD,UAAU,CAACE,EAArB;AAAA;AAAA;AAAA;AAAA,gBADF;AAKD,OAPA;AADJ;AAAA;AAAA;AAAA;AAAA,YAVL;AAAA;AAAA;AAAA;AAAA;AAAA,UAFF;AA8BD;;GA3DQjB,Y;UAOUD,W;;;KAPVC,Y;AA+DT,eAAeA,YAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { fetchSuggestions } from \"./utils/api\";\nimport \"./Autocomplete.css\";\nimport {SaveID} from './redux/action'\nimport { useSelector,useDispatch  } from 'react-redux'\n\nfunction Autocomplete() {\n\n  //const [searchTerm, setSearchTerm] = useState(\"\");\n  const { searchTerm, setSearchTerm, searchResults } = useSearchProduct();\n  const [suggestions, setSuggestions] = useState([]);\n  const [showSuggestions, setshowSuggestions] = useState(false);\n // const productID = useSelector(state => state.data.productID)\n  const dispatch = useDispatch()\n  const maxSize=10\n \n \n\n  useEffect(() => {    \n    fetchSuggestions(searchTerm).then((_suggestions) =>\n      setSuggestions(_suggestions.slice(0,maxSize))\n    );\n   // console.log('useEffect',suggestions)   \n  }, [searchTerm]);\n  \n  const setSuggestion= suggestion=>{\n    setSearchTerm(suggestion.title)\n    setshowSuggestions(false)\n    dispatch(SaveID(suggestion.id))\n    //console.log('props.productID', productID)\n  }\n  const setSearch= searchTerm=>{\n    setSearchTerm(searchTerm)\n    searchTerm ===''?setshowSuggestions(false):setshowSuggestions(true)\n  }\n  return (\n       \n    <div className=\"search-container\">\n      <input\n        type=\"text\"\n        value={searchTerm}\n        className=\"search-box\"\n        placeholder=\"Search for a product\"\n        onChange={(e) => setSearch(e.target.value)}\n      />  \n      {(showSuggestions&&suggestions) &&(\n         \n         <ul class=\"suggestions\">\n            {suggestions.map((suggestion, index) => {\n              \n              return (\n                <li  key={suggestion.id} onClick={()=>setSuggestion(suggestion)}>\n                  {suggestion.title}\n                </li>\n              );\n            })}\n          </ul>\n\n\n      )} \n      \n    </div>\n   \n    \n  );\n}\n\n\n\nexport default Autocomplete;\n"]},"metadata":{},"sourceType":"module"}