{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Manish\\\\Documents\\\\Projects\\\\LBG test\\\\lloyds-web-interview\\\\src\\\\Autocomplete.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { fetchSuggestions } from \"./utils/api\";\nimport \"./Autocomplete.css\";\nimport { SaveID } from './redux/action';\nimport { connect } from 'react-redux';\nimport { useSelector } from 'react-redux';\n\nfunction Autocomplete() {\n  _s();\n\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [suggestions, setSuggestions] = useState([]);\n  const [showSuggestions, setshowSuggestions] = useState(false);\n  const productID = useSelector(state => tate.data.productID);\n  useEffect(() => {\n    console.log('useEffect', searchTerm);\n    fetchSuggestions(searchTerm).then(_suggestions => setSuggestions(_suggestions)); // console.log('useEffect',suggestions)   \n  }, [searchTerm]);\n\n  const setSuggestion = suggestion => {\n    setSearchTerm(suggestion.title);\n    setshowSuggestions(false);\n    dispatch(SaveID(suggestion.id));\n    console.log('props.productID', props.productID);\n  };\n\n  const setSearch = searchTerm => {\n    setSearchTerm(searchTerm);\n    searchTerm === '' ? setshowSuggestions(false) : setshowSuggestions(true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"search-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: searchTerm,\n      className: \"search-box\",\n      placeholder: \"Search for a product\",\n      onChange: e => setSearch(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), showSuggestions && suggestions && /*#__PURE__*/_jsxDEV(\"ul\", {\n      class: \"suggestions\",\n      children: suggestions.map((suggestion, index) => {\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          onClick: () => setSuggestion(suggestion),\n          children: suggestion.title\n        }, suggestion.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 17\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 10\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Autocomplete, \"90RmzfV3f3XcMqFxljvQSmcbx6A=\", false, function () {\n  return [useSelector];\n});\n\n_c = Autocomplete;\n\nconst mapStateToProps = state => {\n  productID: state.data.productID;\n};\n\nexport default connect(mapStateToProps)(Autocomplete);\n\nvar _c;\n\n$RefreshReg$(_c, \"Autocomplete\");","map":{"version":3,"sources":["C:/Users/Manish/Documents/Projects/LBG test/lloyds-web-interview/src/Autocomplete.js"],"names":["React","useEffect","useState","fetchSuggestions","SaveID","connect","useSelector","Autocomplete","searchTerm","setSearchTerm","suggestions","setSuggestions","showSuggestions","setshowSuggestions","productID","state","tate","data","console","log","then","_suggestions","setSuggestion","suggestion","title","dispatch","id","props","setSearch","e","target","value","map","index","mapStateToProps"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,gBAAT,QAAiC,aAAjC;AACA,OAAO,oBAAP;AACA,SAAQC,MAAR,QAAqB,gBAArB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAASC,WAAT,QAA4B,aAA5B;;AAEA,SAASC,YAAT,GAAwB;AAAA;;AAEtB,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BP,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACQ,WAAD,EAAcC,cAAd,IAAgCT,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACU,eAAD,EAAkBC,kBAAlB,IAAwCX,QAAQ,CAAC,KAAD,CAAtD;AACA,QAAMY,SAAS,GAAGR,WAAW,CAACS,KAAK,IAAIC,IAAI,CAACC,IAAL,CAAUH,SAApB,CAA7B;AAIAb,EAAAA,SAAS,CAAC,MAAM;AACdiB,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAwBX,UAAxB;AACAL,IAAAA,gBAAgB,CAACK,UAAD,CAAhB,CAA6BY,IAA7B,CAAmCC,YAAD,IAChCV,cAAc,CAACU,YAAD,CADhB,EAFc,CAKf;AACA,GANQ,EAMN,CAACb,UAAD,CANM,CAAT;;AAQA,QAAMc,aAAa,GAAEC,UAAU,IAAE;AAC/Bd,IAAAA,aAAa,CAACc,UAAU,CAACC,KAAZ,CAAb;AACAX,IAAAA,kBAAkB,CAAC,KAAD,CAAlB;AACAY,IAAAA,QAAQ,CAACrB,MAAM,CAACmB,UAAU,CAACG,EAAZ,CAAP,CAAR;AACAR,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BQ,KAAK,CAACb,SAArC;AACD,GALD;;AAMA,QAAMc,SAAS,GAAEpB,UAAU,IAAE;AAC3BC,IAAAA,aAAa,CAACD,UAAD,CAAb;AACAA,IAAAA,UAAU,KAAI,EAAd,GAAiBK,kBAAkB,CAAC,KAAD,CAAnC,GAA2CA,kBAAkB,CAAC,IAAD,CAA7D;AACD,GAHD;;AAIA,sBAEE;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAA,4BACE;AACE,MAAA,IAAI,EAAC,MADP;AAEE,MAAA,KAAK,EAAEL,UAFT;AAGE,MAAA,SAAS,EAAC,YAHZ;AAIE,MAAA,WAAW,EAAC,sBAJd;AAKE,MAAA,QAAQ,EAAGqB,CAAD,IAAOD,SAAS,CAACC,CAAC,CAACC,MAAF,CAASC,KAAV;AAL5B;AAAA;AAAA;AAAA;AAAA,YADF,EAQInB,eAAe,IAAEF,WAAlB,iBAEE;AAAI,MAAA,KAAK,EAAC,aAAV;AAAA,gBACIA,WAAW,CAACsB,GAAZ,CAAgB,CAACT,UAAD,EAAaU,KAAb,KAAuB;AAEtC,4BACE;AAAyB,UAAA,OAAO,EAAE,MAAIX,aAAa,CAACC,UAAD,CAAnD;AAAA,oBACGA,UAAU,CAACC;AADd,WAAUD,UAAU,CAACG,EAArB;AAAA;AAAA;AAAA;AAAA,gBADF;AAKD,OAPA;AADJ;AAAA;AAAA;AAAA;AAAA,YAVL;AAAA;AAAA;AAAA;AAAA;AAAA,UAFF;AA6BD;;GAxDQnB,Y;UAKWD,W;;;KALXC,Y;;AA0DT,MAAM2B,eAAe,GAACnB,KAAK,IAAE;AAC3BD,EAAAA,SAAS,EAACC,KAAK,CAACE,IAAN,CAAWH,SAAX;AACX,CAFD;;AAIA,eAAeT,OAAO,CAAC6B,eAAD,CAAP,CAAyB3B,YAAzB,CAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { fetchSuggestions } from \"./utils/api\";\nimport \"./Autocomplete.css\";\nimport {SaveID} from './redux/action'\nimport {connect} from 'react-redux'\nimport { useSelector } from 'react-redux'\n\nfunction Autocomplete() {\n\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [suggestions, setSuggestions] = useState([]);\n  const [showSuggestions, setshowSuggestions] = useState(false);\n  const productID = useSelector(state => tate.data.productID)\n \n \n\n  useEffect(() => {\n    console.log('useEffect',searchTerm)\n    fetchSuggestions(searchTerm).then((_suggestions) =>\n      setSuggestions(_suggestions)\n    );\n   // console.log('useEffect',suggestions)   \n  }, [searchTerm]);\n  \n  const setSuggestion= suggestion=>{\n    setSearchTerm(suggestion.title)\n    setshowSuggestions(false)\n    dispatch(SaveID(suggestion.id))\n    console.log('props.productID', props.productID)\n  }\n  const setSearch= searchTerm=>{\n    setSearchTerm(searchTerm)\n    searchTerm ===''?setshowSuggestions(false):setshowSuggestions(true)\n  }\n  return (\n       \n    <div className=\"search-container\">\n      <input\n        type=\"text\"\n        value={searchTerm}\n        className=\"search-box\"\n        placeholder=\"Search for a product\"\n        onChange={(e) => setSearch(e.target.value)}\n      />  \n      {(showSuggestions&&suggestions) &&(\n         \n         <ul class=\"suggestions\">\n            {suggestions.map((suggestion, index) => {\n              \n              return (\n                <li  key={suggestion.id} onClick={()=>setSuggestion(suggestion)}>\n                  {suggestion.title}\n                </li>\n              );\n            })}\n          </ul>\n\n\n      )}     \n    </div>\n   \n    \n  );\n}\n\nconst mapStateToProps=state=>{\n  productID:state.data.productID\n}\n\nexport default connect(mapStateToProps)(Autocomplete);\n"]},"metadata":{},"sourceType":"module"}