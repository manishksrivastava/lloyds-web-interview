{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Manish\\\\Documents\\\\Projects\\\\LBG test\\\\lloyds-web-interview\\\\src\\\\Autocomplete.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { fetchSuggestions } from \"./utils/api\";\nimport \"./Autocomplete.css\";\nimport { SaveID } from './redux/action';\nimport { useSelector, useDispatch } from 'react-redux';\nimport AwesomeDebouncePromise from 'awesome-debounce-promise';\nimport useConstant from 'use-constant';\nimport { useAsync } from 'react-async-hook';\n\nfunction Autocomplete() {\n  _s();\n\n  // Componenet State\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [suggestions, setSuggestions] = useState([]);\n  const [showSuggestions, setshowSuggestions] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const dispatch = useDispatch();\n  const maxSize = 10; // set Suggestion to componenet state and reducers \n\n  const setSuggestion = suggestion => {\n    setSearchTerm(suggestion.title);\n    setshowSuggestions(false);\n    dispatch(SaveID(suggestion.id));\n  }; // Fetch Search result \n\n\n  const searchFunction = searchTerm => fetchSuggestions(searchTerm); // AwesomeDebouncePromise: Handle concurrent requests nicely (only use last request's response) \n\n\n  const debouncedSearchFunction = AwesomeDebouncePromise(searchFunction, 1000); // Handle product serch change event \n\n  const onSearchChange = async searchTerm => {\n    setSearchTerm(searchTerm);\n    searchTerm === '' ? setshowSuggestions(false) : setshowSuggestions(true);\n    const response = await debouncedSearchFunction(searchTerm);\n    console.log('response******', response);\n\n    if (response.result > 0) {\n      console.log('result***************', response.result);\n      setSuggestions(response.result.slice(0, maxSize));\n    } else {\n      setErrorMessage(response.errorMessage);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"search-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: searchTerm,\n      className: \"search-box\",\n      placeholder: \"Search for a product\",\n      onChange: e => onSearchChange(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), errorMessage != '' ? showSuggestions && suggestions && suggestions.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n      class: \"suggestions\",\n      children: suggestions.map((suggestion, index) => {\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          onClick: () => setSuggestion(suggestion),\n          children: suggestion.title\n        }, suggestion.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"no-suggestions\",\n      children: /*#__PURE__*/_jsxDEV(\"em\", {\n        children: \"No suggestions!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"no-suggestions\",\n      children: /*#__PURE__*/_jsxDEV(\"em\", {\n        children: errorMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 8\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Autocomplete, \"ykj5T1MT8pTG87p3jJRp96kHOj8=\", false, function () {\n  return [useDispatch];\n});\n\n_c = Autocomplete;\nexport default Autocomplete;\n\nvar _c;\n\n$RefreshReg$(_c, \"Autocomplete\");","map":{"version":3,"sources":["C:/Users/Manish/Documents/Projects/LBG test/lloyds-web-interview/src/Autocomplete.js"],"names":["React","useEffect","useState","fetchSuggestions","SaveID","useSelector","useDispatch","AwesomeDebouncePromise","useConstant","useAsync","Autocomplete","searchTerm","setSearchTerm","suggestions","setSuggestions","showSuggestions","setshowSuggestions","errorMessage","setErrorMessage","dispatch","maxSize","setSuggestion","suggestion","title","id","searchFunction","debouncedSearchFunction","onSearchChange","response","console","log","result","slice","e","target","value","length","map","index"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,gBAAT,QAAiC,aAAjC;AACA,OAAO,oBAAP;AACA,SAASC,MAAT,QAAuB,gBAAvB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,sBAAP,MAAmC,0BAAnC;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,SAASC,QAAT,QAAyB,kBAAzB;;AAGA,SAASC,YAAT,GAAwB;AAAA;;AAEtB;AACA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BV,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACW,WAAD,EAAcC,cAAd,IAAgCZ,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACa,eAAD,EAAkBC,kBAAlB,IAAwCd,QAAQ,CAAC,KAAD,CAAtD;AACA,QAAM,CAACe,YAAD,EAAeC,eAAf,IAAkChB,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAMiB,QAAQ,GAAGb,WAAW,EAA5B;AACA,QAAMc,OAAO,GAAG,EAAhB,CARsB,CAUxB;;AACE,QAAMC,aAAa,GAAGC,UAAU,IAAI;AAClCV,IAAAA,aAAa,CAACU,UAAU,CAACC,KAAZ,CAAb;AACAP,IAAAA,kBAAkB,CAAC,KAAD,CAAlB;AACAG,IAAAA,QAAQ,CAACf,MAAM,CAACkB,UAAU,CAACE,EAAZ,CAAP,CAAR;AACD,GAJD,CAXsB,CAiBrB;;;AACD,QAAMC,cAAc,GAAEd,UAAU,IAAGR,gBAAgB,CAACQ,UAAD,CAAnD,CAlBsB,CAmBrB;;;AACD,QAAMe,uBAAuB,GAAGnB,sBAAsB,CAACkB,cAAD,EAAiB,IAAjB,CAAtD,CApBsB,CAqBtB;;AACA,QAAME,cAAc,GAAG,MAAMhB,UAAN,IAAoB;AACzCC,IAAAA,aAAa,CAACD,UAAD,CAAb;AACAA,IAAAA,UAAU,KAAK,EAAf,GAAoBK,kBAAkB,CAAC,KAAD,CAAtC,GAAgDA,kBAAkB,CAAC,IAAD,CAAlE;AACA,UAAMY,QAAQ,GAAG,MAAMF,uBAAuB,CAACf,UAAD,CAA9C;AACAkB,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA6BF,QAA7B;;AACA,QAAGA,QAAQ,CAACG,MAAT,GAAiB,CAApB,EAAsB;AACpBF,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAoCF,QAAQ,CAACG,MAA7C;AACAjB,MAAAA,cAAc,CAACc,QAAQ,CAACG,MAAT,CAAgBC,KAAhB,CAAsB,CAAtB,EAAyBZ,OAAzB,CAAD,CAAd;AACD,KAHD,MAIA;AACEF,MAAAA,eAAe,CAACU,QAAQ,CAACX,YAAV,CAAf;AACD;AAEF,GAbD;;AAeA,sBAEE;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAA,4BACE;AACE,MAAA,IAAI,EAAC,MADP;AAEE,MAAA,KAAK,EAAEN,UAFT;AAGE,MAAA,SAAS,EAAC,YAHZ;AAIE,MAAA,WAAW,EAAC,sBAJd;AAKE,MAAA,QAAQ,EAAGsB,CAAD,IAAON,cAAc,CAACM,CAAC,CAACC,MAAF,CAASC,KAAV;AALjC;AAAA;AAAA;AAAA;AAAA,YADF,EAQGlB,YAAY,IAAE,EAAd,GAAkBF,eAAe,IAAIF,WAAnB,IAAkCA,WAAW,CAACuB,MAAZ,GAAmB,CAAtD,gBAEhB;AAAI,MAAA,KAAK,EAAC,aAAV;AAAA,gBACGvB,WAAW,CAACwB,GAAZ,CAAgB,CAACf,UAAD,EAAagB,KAAb,KAAuB;AAEtC,4BACE;AAAwB,UAAA,OAAO,EAAE,MAAMjB,aAAa,CAACC,UAAD,CAApD;AAAA,oBACGA,UAAU,CAACC;AADd,WAASD,UAAU,CAACE,EAApB;AAAA;AAAA;AAAA;AAAA,gBADF;AAKD,OAPA;AADH;AAAA;AAAA;AAAA;AAAA,YAFgB,gBAelB;AAAK,MAAA,KAAK,EAAC,gBAAX;AAAA,6BACM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADN;AAAA;AAAA;AAAA;AAAA,YAfC,gBAmBA;AAAK,MAAA,KAAK,EAAC,gBAAX;AAAA,6BACK;AAAA,kBAAKP;AAAL;AAAA;AAAA;AAAA;AAAA;AADL;AAAA;AAAA;AAAA;AAAA,YA3BH;AAAA;AAAA;AAAA;AAAA;AAAA,UAFF;AAsCD;;GA3EQP,Y;UAOUJ,W;;;KAPVI,Y;AA+ET,eAAeA,YAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { fetchSuggestions } from \"./utils/api\";\nimport \"./Autocomplete.css\";\nimport { SaveID } from './redux/action'\nimport { useSelector, useDispatch } from 'react-redux'\nimport AwesomeDebouncePromise from 'awesome-debounce-promise';\nimport useConstant from 'use-constant';\nimport { useAsync } from 'react-async-hook';\n\n\nfunction Autocomplete() {\n\n  // Componenet State\n  const [searchTerm, setSearchTerm] = useState(\"\"); \n  const [suggestions, setSuggestions] = useState([]);\n  const [showSuggestions, setshowSuggestions] = useState(false);  \n  const [errorMessage, setErrorMessage] = useState(\"\"); \n  const dispatch = useDispatch()\n  const maxSize = 10\n\n// set Suggestion to componenet state and reducers \n  const setSuggestion = suggestion => {\n    setSearchTerm(suggestion.title)\n    setshowSuggestions(false)\n    dispatch(SaveID(suggestion.id))    \n  }\n  \n   // Fetch Search result \n  const searchFunction =searchTerm=> fetchSuggestions(searchTerm) \n   // AwesomeDebouncePromise: Handle concurrent requests nicely (only use last request's response) \n  const debouncedSearchFunction = AwesomeDebouncePromise(searchFunction, 1000)  \n  // Handle product serch change event \n  const onSearchChange = async searchTerm => {\n    setSearchTerm(searchTerm)\n    searchTerm === '' ? setshowSuggestions(false) : setshowSuggestions(true)\n    const response = await debouncedSearchFunction(searchTerm); \n    console.log('response******',response)\n    if(response.result >0){\n      console.log('result***************',response.result) \n      setSuggestions(response.result.slice(0, maxSize))\n    } else\n    {\n      setErrorMessage(response.errorMessage)\n    } \n    \n  }  \n\n  return (\n\n    <div className=\"search-container\">\n      <input\n        type=\"text\"\n        value={searchTerm}\n        className=\"search-box\"\n        placeholder=\"Search for a product\"\n        onChange={(e) => onSearchChange(e.target.value)}\n      />\n      {errorMessage!=''?(showSuggestions && suggestions && suggestions.length>0) ? (\n\n        <ul class=\"suggestions\">\n          {suggestions.map((suggestion, index) => {\n\n            return (\n              <li key={suggestion.id} onClick={() => setSuggestion(suggestion)}>\n                {suggestion.title}\n              </li>\n            );\n          })}\n        </ul>\n\n\n      ):\n     (<div class=\"no-suggestions\">\n            <em>No suggestions!</em>\n      </div>)\n      :\n      (<div class=\"no-suggestions\">\n            <em>{errorMessage}</em>\n      </div>)\n      }\n\n    </div>\n\n\n  );\n}\n\n\n\nexport default Autocomplete;\n"]},"metadata":{},"sourceType":"module"}