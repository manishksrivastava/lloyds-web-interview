{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Manish\\\\Documents\\\\Projects\\\\LBG test\\\\lloyds-web-interview\\\\src\\\\Autocomplete.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { fetchSuggestions } from \"./utils/api\";\nimport \"./Autocomplete.css\";\nimport { SaveID } from './redux/action';\nimport { useSelector, useDispatch } from 'react-redux';\nimport AwesomeDebouncePromise from 'awesome-debounce-promise';\nimport useConstant from 'use-constant';\nimport { useAsync } from 'react-async-hook'; // Generic reusable hook\n\nconst useDebouncedSearch = searchFunction => {\n  _s();\n\n  // Handle the input text state\n  const [inputText, setInputText] = useState(''); // Debounce the original search async function\n\n  const debouncedSearchFunction = useConstant(() => AwesomeDebouncePromise(searchFunction, 300)); // The async callback is run each time the text changes,\n  // but as the search function is debounced, it does not\n  // fire a new request on each keystroke\n\n  const searchResults = useAsync(async () => {\n    if (inputText.length === 0) {\n      return [];\n    } else {\n      return debouncedSearchFunction(inputText);\n    }\n  }, [debouncedSearchFunction, inputText]); // Return everything needed for the hook consumer\n\n  return {\n    inputText,\n    setInputText,\n    searchResults\n  };\n};\n\n_s(useDebouncedSearch, \"S3C9CBQ/vaERsuhRCeJ2Tk9s9yg=\", false, function () {\n  return [useConstant, useAsync];\n});\n\nconst useSearchProduct = () => {\n  _s2();\n\n  return useDebouncedSearch(text => searchProductAsync(text));\n};\n\n_s2(useSearchProduct, \"D/XPO8HpaPsJp8MCO3jZB4+u89w=\", false, function () {\n  return [useDebouncedSearch];\n});\n\nfunction Autocomplete() {\n  _s3();\n\n  //const [searchTerm, setSearchTerm] = useState(\"\");\n  const {\n    searchTerm,\n    setSearchTerm,\n    searchResults\n  } = useSearchProduct();\n  const [suggestions, setSuggestions] = useState([]);\n  const [showSuggestions, setshowSuggestions] = useState(false); // const productID = useSelector(state => state.data.productID)\n\n  const dispatch = useDispatch();\n  const maxSize = 10;\n  useEffect(() => {\n    fetchSuggestions(searchTerm).then(_suggestions => setSuggestions(_suggestions.slice(0, maxSize))); // console.log('useEffect',suggestions)   \n  }, [searchTerm]);\n\n  const setSuggestion = suggestion => {\n    setSearchTerm(suggestion.title);\n    setshowSuggestions(false);\n    dispatch(SaveID(suggestion.id)); //console.log('props.productID', productID)\n  };\n\n  const setSearch = searchTerm => {\n    setSearchTerm(searchTerm);\n    searchTerm === '' ? setshowSuggestions(false) : setshowSuggestions(true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"search-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: searchTerm,\n      className: \"search-box\",\n      placeholder: \"Search for a product\",\n      onChange: e => setSearch(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), showSuggestions && suggestions && /*#__PURE__*/_jsxDEV(\"ul\", {\n      class: \"suggestions\",\n      children: suggestions.map((suggestion, index) => {\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          onClick: () => setSuggestion(suggestion),\n          children: suggestion.title\n        }, suggestion.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 17\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 10\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n}\n\n_s3(Autocomplete, \"T62jQ/Tb1ATD4pprQqkOVWuMVOc=\", false, function () {\n  return [useSearchProduct, useDispatch];\n});\n\n_c = Autocomplete;\nexport default Autocomplete;\n\nvar _c;\n\n$RefreshReg$(_c, \"Autocomplete\");","map":{"version":3,"sources":["C:/Users/Manish/Documents/Projects/LBG test/lloyds-web-interview/src/Autocomplete.js"],"names":["React","useEffect","useState","fetchSuggestions","SaveID","useSelector","useDispatch","AwesomeDebouncePromise","useConstant","useAsync","useDebouncedSearch","searchFunction","inputText","setInputText","debouncedSearchFunction","searchResults","length","useSearchProduct","text","searchProductAsync","Autocomplete","searchTerm","setSearchTerm","suggestions","setSuggestions","showSuggestions","setshowSuggestions","dispatch","maxSize","then","_suggestions","slice","setSuggestion","suggestion","title","id","setSearch","e","target","value","map","index"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { fetchSuggestions } from \"./utils/api\";\nimport \"./Autocomplete.css\";\nimport {SaveID} from './redux/action'\nimport { useSelector,useDispatch  } from 'react-redux'\nimport AwesomeDebouncePromise from 'awesome-debounce-promise';\nimport useConstant from 'use-constant';\nimport { useAsync } from 'react-async-hook';\n\n// Generic reusable hook\nconst useDebouncedSearch = (searchFunction) => {\n\n  // Handle the input text state\n  const [inputText, setInputText] = useState('');\n\n  // Debounce the original search async function\n  const debouncedSearchFunction = useConstant(() =>\n  AwesomeDebouncePromise(searchFunction, 300)\n  );\n\n  // The async callback is run each time the text changes,\n  // but as the search function is debounced, it does not\n  // fire a new request on each keystroke\n  const searchResults = useAsync(\n    async () => {\n      if (inputText.length === 0) {\n        return [];\n      } else {\n        return debouncedSearchFunction(inputText);\n      }\n    },\n    [debouncedSearchFunction, inputText]\n  );\n\n  // Return everything needed for the hook consumer\n  return {\n    inputText,\n    setInputText,\n    searchResults,\n  };\n};\n\nconst useSearchProduct = () => useDebouncedSearch(text => searchProductAsync(text))\nfunction Autocomplete() {\n\n  //const [searchTerm, setSearchTerm] = useState(\"\");\n  const { searchTerm, setSearchTerm, searchResults } = useSearchProduct();\n  const [suggestions, setSuggestions] = useState([]);\n  const [showSuggestions, setshowSuggestions] = useState(false);\n // const productID = useSelector(state => state.data.productID)\n  const dispatch = useDispatch()\n  const maxSize=10\n \n \n\n  useEffect(() => {    \n    fetchSuggestions(searchTerm).then((_suggestions) =>\n      setSuggestions(_suggestions.slice(0,maxSize))\n    );\n   // console.log('useEffect',suggestions)   \n  }, [searchTerm]);\n  \n  const setSuggestion= suggestion=>{\n    setSearchTerm(suggestion.title)\n    setshowSuggestions(false)\n    dispatch(SaveID(suggestion.id))\n    //console.log('props.productID', productID)\n  }\n  const setSearch= searchTerm=>{\n    setSearchTerm(searchTerm)\n    searchTerm ===''?setshowSuggestions(false):setshowSuggestions(true)\n  }\n  return (\n       \n    <div className=\"search-container\">\n      <input\n        type=\"text\"\n        value={searchTerm}\n        className=\"search-box\"\n        placeholder=\"Search for a product\"\n        onChange={(e) => setSearch(e.target.value)}\n      />  \n      {(showSuggestions&&suggestions) &&(\n         \n         <ul class=\"suggestions\">\n            {suggestions.map((suggestion, index) => {\n              \n              return (\n                <li  key={suggestion.id} onClick={()=>setSuggestion(suggestion)}>\n                  {suggestion.title}\n                </li>\n              );\n            })}\n          </ul>\n\n\n      )} \n      \n    </div>\n   \n    \n  );\n}\n\n\n\nexport default Autocomplete;\n"]},"metadata":{},"sourceType":"module"}