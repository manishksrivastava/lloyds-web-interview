{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Manish\\\\Documents\\\\Projects\\\\LBG test\\\\lloyds-web-interview\\\\src\\\\Autocomplete.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { fetchSuggestions } from \"./utils/api\";\nimport \"./Autocomplete.css\";\nimport { SaveID } from './redux/action';\nimport { useSelector, useDispatch } from 'react-redux';\nimport AwesomeDebouncePromise from 'awesome-debounce-promise';\nimport useConstant from 'use-constant';\nimport { useAsync } from 'react-async-hook'; // Generic reusable hook\n\n/*const useDebouncedSearch = (searchFunction) => {\n\n  // Handle the input text state\n  const [inputText, setInputText] = useState('');\n\n  // Debounce the original search async function\n  const debouncedSearchFunction = useConstant(() =>\n  AwesomeDebouncePromise(searchFunction, 300)\n  );\n\n  // The async callback is run each time the text changes,\n  // but as the search function is debounced, it does not\n  // fire a new request on each keystroke\n  const searchResults = useAsync(\n    async () => {\n      if (inputText.length === 0) {\n        return [];\n      } else {\n        return debouncedSearchFunction(inputText);\n      }\n    },\n    [debouncedSearchFunction, inputText]\n  );\n\n  // Return everything needed for the hook consumer\n  return {\n    inputText,\n    setInputText,\n    searchResults,\n  };\n}; */\n//const useSearchProduct = () => useDebouncedSearch(text => searchProductAsync(text))\n\nfunction Autocomplete() {\n  _s();\n\n  const [searchTerm, setSearchTerm] = useState(\"\"); // const { searchTerm, setSearchTerm, searchResults } = useSearchProduct();\n\n  const [suggestions, setSuggestions] = useState([]);\n  const [showSuggestions, setshowSuggestions] = useState(false); // const productID = useSelector(state => state.data.productID)\n\n  const dispatch = useDispatch();\n  const maxSize = 10;\n  useEffect(() => {// AwesomeDebouncePromise(searchFunction, 300)\n  }, [searchTerm]);\n  const searchFunction = fetchSuggestions(searchTerm).then(_suggestions => setSuggestions(_suggestions.slice(0, maxSize)));\n\n  const setSuggestion = suggestion => {\n    setSearchTerm(suggestion.title);\n    setshowSuggestions(false);\n    dispatch(SaveID(suggestion.id)); //console.log('props.productID', productID)\n  };\n\n  const setSearch = searchTerm => {\n    setSearchTerm(searchTerm);\n    searchTerm === '' ? setshowSuggestions(false) : setshowSuggestions(true);\n    AwesomeDebouncePromise(searchFunction, 300);\n  };\n\n  const debouncedSearchFunction = AwesomeDebouncePromise(searchFunction, 300);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"search-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: searchTerm,\n      className: \"search-box\",\n      placeholder: \"Search for a product\",\n      onChange: e => setSearch(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), showSuggestions && suggestions && /*#__PURE__*/_jsxDEV(\"ul\", {\n      class: \"suggestions\",\n      children: suggestions.map((suggestion, index) => {\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          onClick: () => setSuggestion(suggestion),\n          children: suggestion.title\n        }, suggestion.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Autocomplete, \"0Z08SlcRdVb6FHnObiYiM/wr0nU=\", false, function () {\n  return [useDispatch];\n});\n\n_c = Autocomplete;\nexport default Autocomplete;\n\nvar _c;\n\n$RefreshReg$(_c, \"Autocomplete\");","map":{"version":3,"sources":["C:/Users/Manish/Documents/Projects/LBG test/lloyds-web-interview/src/Autocomplete.js"],"names":["React","useEffect","useState","fetchSuggestions","SaveID","useSelector","useDispatch","AwesomeDebouncePromise","useConstant","useAsync","Autocomplete","searchTerm","setSearchTerm","suggestions","setSuggestions","showSuggestions","setshowSuggestions","dispatch","maxSize","searchFunction","then","_suggestions","slice","setSuggestion","suggestion","title","id","setSearch","debouncedSearchFunction","e","target","value","map","index"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { fetchSuggestions } from \"./utils/api\";\nimport \"./Autocomplete.css\";\nimport { SaveID } from './redux/action'\nimport { useSelector, useDispatch } from 'react-redux'\nimport AwesomeDebouncePromise from 'awesome-debounce-promise';\nimport useConstant from 'use-constant';\nimport { useAsync } from 'react-async-hook';\n\n// Generic reusable hook\n/*const useDebouncedSearch = (searchFunction) => {\n\n  // Handle the input text state\n  const [inputText, setInputText] = useState('');\n\n  // Debounce the original search async function\n  const debouncedSearchFunction = useConstant(() =>\n  AwesomeDebouncePromise(searchFunction, 300)\n  );\n\n  // The async callback is run each time the text changes,\n  // but as the search function is debounced, it does not\n  // fire a new request on each keystroke\n  const searchResults = useAsync(\n    async () => {\n      if (inputText.length === 0) {\n        return [];\n      } else {\n        return debouncedSearchFunction(inputText);\n      }\n    },\n    [debouncedSearchFunction, inputText]\n  );\n\n  // Return everything needed for the hook consumer\n  return {\n    inputText,\n    setInputText,\n    searchResults,\n  };\n}; */\n\n//const useSearchProduct = () => useDebouncedSearch(text => searchProductAsync(text))\nfunction Autocomplete() {\n\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  // const { searchTerm, setSearchTerm, searchResults } = useSearchProduct();\n  const [suggestions, setSuggestions] = useState([]);\n  const [showSuggestions, setshowSuggestions] = useState(false);\n  // const productID = useSelector(state => state.data.productID)\n  const dispatch = useDispatch()\n  const maxSize = 10\n\n\n\n  useEffect(() => {\n   // AwesomeDebouncePromise(searchFunction, 300)\n  }, [searchTerm]);\n\n  const searchFunction = fetchSuggestions(searchTerm).then((_suggestions) =>\n    setSuggestions(_suggestions.slice(0, maxSize))\n  );\n\n  const setSuggestion = suggestion => {\n    setSearchTerm(suggestion.title)\n    setshowSuggestions(false)\n    dispatch(SaveID(suggestion.id))\n    //console.log('props.productID', productID)\n  }\n  const setSearch = searchTerm => {\n    setSearchTerm(searchTerm)\n    searchTerm === '' ? setshowSuggestions(false) : setshowSuggestions(true)\n    AwesomeDebouncePromise(searchFunction, 300)\n  }\n\n  const debouncedSearchFunction = AwesomeDebouncePromise(searchFunction, 300)\n  \n  return (\n\n    <div className=\"search-container\">\n      <input\n        type=\"text\"\n        value={searchTerm}\n        className=\"search-box\"\n        placeholder=\"Search for a product\"\n        onChange={(e) => setSearch(e.target.value)}\n      />\n      {(showSuggestions && suggestions) && (\n\n        <ul class=\"suggestions\">\n          {suggestions.map((suggestion, index) => {\n\n            return (\n              <li key={suggestion.id} onClick={() => setSuggestion(suggestion)}>\n                {suggestion.title}\n              </li>\n            );\n          })}\n        </ul>\n\n\n      )}\n\n    </div>\n\n\n  );\n}\n\n\n\nexport default Autocomplete;\n"]},"metadata":{},"sourceType":"module"}